{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Stock JS v11.4.7 (2024-08-14)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Karol Kolodziej\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/klinger', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: { prototype: smaProto } } = SeriesRegistry.seriesTypes;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, between which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            const pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                const proto = IndicatorClass.prototype;\n                proto.linesApiNames = (proto.linesApiNames ||\n                    linesApiNames.slice());\n                proto.pointArrayMap = (proto.pointArrayMap ||\n                    pointArrayMap.slice());\n                proto.pointValKey = (proto.pointValKey ||\n                    pointValKey);\n                proto.areaLinesNames = (proto.areaLinesNames ||\n                    areaLinesNames.slice());\n                proto.drawGraph = indicatorDrawGraph;\n                proto.getGraphPath = indicatorGetGraphPath;\n                proto.toYData = indicatorToYData;\n                proto.translate = indicatorTranslate;\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                const translatedLines = [];\n                (indicator.pointArrayMap || []).forEach((propertyName) => {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                const indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // Additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                let pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach((plotLine, index) => {\n                    // Create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    const index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach((lineName, i) => {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                let areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (let i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                const pointColl = [];\n                (this.pointArrayMap || []).forEach((propertyName) => {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                const pointArrayMap = this.pointArrayMap;\n                let LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach((point) => {\n                    pointArrayMap.forEach((propertyName, i) => {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (this.dataModify) {\n                            value = this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Klinger/KlingerIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, error, extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Klinger oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.klinger\n         *\n         * @augments Highcharts.Series\n         */\n        class KlingerIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            calculateTrend(yVal, i) {\n                const isUpward = yVal[i][1] + yVal[i][2] + yVal[i][3] >\n                    yVal[i - 1][1] + yVal[i - 1][2] + yVal[i - 1][3];\n                return isUpward ? 1 : -1;\n            }\n            // Checks if the series and volumeSeries are accessible, number of\n            // points.x is longer than period, is series has OHLC data\n            isValidData(firstYVal) {\n                const chart = this.chart, options = this.options, series = this.linkedParent, isSeriesOHLC = isArray(firstYVal) &&\n                    firstYVal.length === 4, volumeSeries = this.volumeSeries ||\n                    (this.volumeSeries =\n                        chart.get(options.params.volumeSeriesID));\n                if (!volumeSeries) {\n                    error('Series ' +\n                        options.params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                }\n                const isLengthValid = [series, volumeSeries].every(function (series) {\n                    return series && series.xData && series.xData.length >=\n                        options.params.slowAvgPeriod;\n                });\n                return !!(isLengthValid && isSeriesOHLC);\n            }\n            getCM(previousCM, DM, trend, previousTrend, prevoiusDM) {\n                return correctFloat(DM + (trend === previousTrend ? previousCM : prevoiusDM));\n            }\n            getDM(high, low) {\n                return correctFloat(high - low);\n            }\n            getVolumeForce(yVal) {\n                const volumeForce = [];\n                let CM = 0, // Cumulative measurement\n                DM, // Daily measurement\n                force, i = 1, // Start from second point\n                previousCM = 0, previousDM = yVal[0][1] - yVal[0][2], // Initial DM\n                previousTrend = 0, trend;\n                for (i; i < yVal.length; i++) {\n                    trend = this.calculateTrend(yVal, i);\n                    DM = this.getDM(yVal[i][1], yVal[i][2]);\n                    // For the first iteration when the previousTrend doesn't exist,\n                    // previousCM doesn't exist either, but it doesn't matter becouse\n                    // it's filltered out in the getCM method in else statement,\n                    // (in this iteration, previousCM can be raplaced with the DM).\n                    CM = this.getCM(previousCM, DM, trend, previousTrend, previousDM);\n                    force = this.volumeSeries.yData[i] *\n                        trend * Math.abs(2 * ((DM / CM) - 1)) * 100;\n                    volumeForce.push([force]);\n                    // Before next iteration, assign the current as the previous.\n                    previousTrend = trend;\n                    previousCM = CM;\n                    previousDM = DM;\n                }\n                return volumeForce;\n            }\n            getEMA(yVal, prevEMA, SMA, EMApercent, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            }\n            getSMA(period, index, values) {\n                return EMAIndicator.prototype\n                    .accumulatePeriodPoints(period, index, values) / period;\n            }\n            getValues(series, params) {\n                const Klinger = [], xVal = series.xData, yVal = series.yData, xData = [], yData = [], calcSingal = [];\n                let KO, i = 0, fastEMA = 0, slowEMA, previousFastEMA = void 0, previousSlowEMA = void 0, signal = null;\n                // If the necessary conditions are not fulfilled, don't proceed.\n                if (!this.isValidData(yVal[0])) {\n                    return;\n                }\n                // Calculate the Volume Force array.\n                const volumeForce = this.getVolumeForce(yVal);\n                // Calculate SMA for the first points.\n                const SMAFast = this.getSMA(params.fastAvgPeriod, 0, volumeForce), SMASlow = this.getSMA(params.slowAvgPeriod, 0, volumeForce);\n                // Calculate EMApercent for the first points.\n                const fastEMApercent = 2 / (params.fastAvgPeriod + 1), slowEMApercent = 2 / (params.slowAvgPeriod + 1);\n                // Calculate KO\n                for (i; i < yVal.length; i++) {\n                    // Get EMA for fast period.\n                    if (i >= params.fastAvgPeriod) {\n                        fastEMA = this.getEMA(volumeForce, previousFastEMA, SMAFast, fastEMApercent, 0, i, xVal)[1];\n                        previousFastEMA = fastEMA;\n                    }\n                    // Get EMA for slow period.\n                    if (i >= params.slowAvgPeriod) {\n                        slowEMA = this.getEMA(volumeForce, previousSlowEMA, SMASlow, slowEMApercent, 0, i, xVal)[1];\n                        previousSlowEMA = slowEMA;\n                        KO = correctFloat(fastEMA - slowEMA);\n                        calcSingal.push(KO);\n                        // Calculate signal SMA\n                        if (calcSingal.length >= params.signalPeriod) {\n                            signal = calcSingal.slice(-params.signalPeriod)\n                                .reduce((prev, curr) => prev + curr) / params.signalPeriod;\n                        }\n                        Klinger.push([xVal[i], KO, signal]);\n                        xData.push(xVal[i]);\n                        yData.push([KO, signal]);\n                    }\n                }\n                return {\n                    values: Klinger,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Klinger oscillator. This series requires the `linkedTo` option to be set\n         * and should be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/klinger\n         *         Klinger oscillator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/klinger\n         * @optionparent plotOptions.klinger\n         */\n        KlingerIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Klinger Oscillator.\n             *\n             * @excluding index, period\n             */\n            params: {\n                /**\n                 * The fast period for indicator calculations.\n                 */\n                fastAvgPeriod: 34,\n                /**\n                 * The slow period for indicator calculations.\n                 */\n                slowAvgPeriod: 55,\n                /**\n                 * The base period for signal calculations.\n                 */\n                signalPeriod: 13,\n                /**\n                 * The id of another series to use its data as volume data for the\n                 * indiator calculation.\n                 */\n                volumeSeriesID: 'volume'\n            },\n            signalLine: {\n                /**\n                 * Styles for a signal line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.klinger.color\n                     * ](#plotOptions.klinger.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: '#ff0000'\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color: {point.color}\">\\u25CF</span>' +\n                    '<b> {series.name}</b><br/>' +\n                    '<span style=\"color: {point.color}\">Klinger</span>: ' +\n                    '{point.y}<br/>' +\n                    '<span style=\"color: ' +\n                    '{point.series.options.signalLine.styles.lineColor}\">' +\n                    'Signal</span>' +\n                    ': {point.signal}<br/>'\n            }\n        });\n        extend(KlingerIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['signalLine'],\n            nameBase: 'Klinger',\n            nameComponents: ['fastAvgPeriod', 'slowAvgPeriod'],\n            pointArrayMap: ['y', 'signal'],\n            parallelArrays: ['x', 'y', 'signal'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(KlingerIndicator);\n        SeriesRegistry.registerSeriesType('klinger', KlingerIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Klinger oscillator. If the [type](#series.klinger.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.klinger\n         * @since 9.1.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/klinger\n         * @apioption series.klinger\n         */\n        ''; // To include the above in the js output\n\n        return KlingerIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/klinger.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","MultipleLinesComposition","sma","prototype","smaProto","seriesTypes","defined","error","merge","linesApiNames","pointArrayMap","areaLinesNames","getLineName","propertyName","charAt","toUpperCase","slice","getTranslatedLinesNames","indicator","excludedValue","translatedLines","forEach","push","indicatorDrawGraph","pointValKey","mainLinePoints","points","mainLineOptions","options","mainLinePath","graph","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","length","point","plotLine","index","x","plotX","plotY","isNull","userOptions","fillColor","secondLinePoints","indexOf","firstLinePoints","originalColor","color","nextPoints","area","fillGraph","drawGraph","call","lineName","i","styles","indicatorGetGraphPath","areaPath","higherAreaPath","getGraphPath","arguments","indicatorToYData","pointColl","indicatorTranslate","LinesNames","value","translate","dataModify","modifyValue","yAxis","toPixels","compose","IndicatorClass","proto","toYData","ema","EMAIndicator","SMAIndicator","correctFloat","extend","isArray","KlingerIndicator","calculateTrend","yVal","isUpward","isValidData","firstYVal","chart","series","linkedParent","isSeriesOHLC","volumeSeries","get","params","volumeSeriesID","isLengthValid","every","xData","slowAvgPeriod","getCM","previousCM","DM","trend","previousTrend","prevoiusDM","getDM","high","low","getVolumeForce","volumeForce","CM","previousDM","yData","Math","abs","getEMA","prevEMA","SMA","EMApercent","xVal","calculateEma","getSMA","period","values","accumulatePeriodPoints","getValues","Klinger","calcSingal","KO","fastEMA","slowEMA","previousFastEMA","previousSlowEMA","signal","SMAFast","fastAvgPeriod","SMASlow","fastEMApercent","slowEMApercent","signalPeriod","reduce","prev","curr","defaultOptions","signalLine","lineWidth","lineColor","dataGrouping","approximation","tooltip","pointFormat","nameBase","nameComponents","parallelArrays","registerSeriesType"],"mappings":"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"}