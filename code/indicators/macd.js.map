{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.7 (2024-08-14)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Sebastian Bochan\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/macd', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/MACD/MACDIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { column: ColumnSeries, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, correctFloat, defined, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The MACD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.macd\n         *\n         * @augments Highcharts.Series\n         */\n        class MACDIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                const originalColor = this.color;\n                // Check whether series is initialized. It may be not initialized,\n                // when any of required indicators is missing.\n                if (this.options) {\n                    // If the default colour doesn't set, get the next available from\n                    // the array and apply it #15608.\n                    if (defined(this.colorIndex)) {\n                        if (this.options.signalLine &&\n                            this.options.signalLine.styles &&\n                            !this.options.signalLine.styles.lineColor) {\n                            this.options.colorIndex = this.colorIndex + 1;\n                            this.getCyclic('color', void 0, this.chart.options.colors);\n                            this.options.signalLine.styles.lineColor =\n                                this.color;\n                        }\n                        if (this.options.macdLine &&\n                            this.options.macdLine.styles &&\n                            !this.options.macdLine.styles.lineColor) {\n                            this.options.colorIndex = this.colorIndex + 1;\n                            this.getCyclic('color', void 0, this.chart.options.colors);\n                            this.options.macdLine.styles.lineColor =\n                                this.color;\n                        }\n                    }\n                    // Zones have indexes automatically calculated, we need to\n                    // translate them to support multiple lines within one indicator\n                    this.macdZones = {\n                        zones: this.options.macdLine.zones,\n                        startIndex: 0\n                    };\n                    this.signalZones = {\n                        zones: this.macdZones.zones.concat(this.options.signalLine.zones),\n                        startIndex: this.macdZones.zones.length\n                    };\n                }\n                // Reset color and index #15608.\n                this.color = originalColor;\n            }\n            toYData(point) {\n                return [point.y, point.signal, point.MACD];\n            }\n            translate() {\n                const indicator = this, plotNames = ['plotSignal', 'plotMACD'];\n                H.seriesTypes.column.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    [point.signal, point.MACD].forEach(function (value, i) {\n                        if (value !== null) {\n                            point[plotNames[i]] =\n                                indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n            destroy() {\n                // This.graph is null due to removing two times the same SVG element\n                this.graph = null;\n                this.graphmacd = this.graphmacd && this.graphmacd.destroy();\n                this.graphsignal = this.graphsignal && this.graphsignal.destroy();\n                SeriesRegistry.seriesTypes.sma.prototype.destroy.apply(this, arguments);\n            }\n            drawGraph() {\n                const indicator = this, mainLinePoints = indicator.points, mainLineOptions = indicator.options, histogramZones = indicator.zones, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, otherSignals = [[], []];\n                let point, pointsLength = mainLinePoints.length;\n                // Generate points for top and bottom lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    if (defined(point.plotMACD)) {\n                        otherSignals[0].push({\n                            plotX: point.plotX,\n                            plotY: point.plotMACD,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                    if (defined(point.plotSignal)) {\n                        otherSignals[1].push({\n                            plotX: point.plotX,\n                            plotY: point.plotSignal,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                }\n                // Modify options and generate smoothing line:\n                ['macd', 'signal'].forEach((lineName, i) => {\n                    indicator.points = otherSignals[i];\n                    indicator.options = merge(mainLineOptions[`${lineName}Line`]?.styles || {}, gappedExtend);\n                    indicator.graph = indicator[`graph${lineName}`];\n                    // Zones extension:\n                    indicator.zones = (indicator[`${lineName}Zones`].zones || []).slice(indicator[`${lineName}Zones`].startIndex || 0);\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    indicator[`graph${lineName}`] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.zones = histogramZones;\n            }\n            applyZones() {\n                // Histogram zones are handled by drawPoints method\n                // Here we need to apply zones for all lines\n                const histogramZones = this.zones;\n                // `signalZones.zones` contains all zones:\n                this.zones = this.signalZones.zones;\n                SeriesRegistry.seriesTypes.sma.prototype.applyZones.call(this);\n                // `applyZones` hides only main series.graph, hide macd line manually\n                if (this.graphmacd && this.options.macdLine.zones.length) {\n                    this.graphmacd.hide();\n                }\n                this.zones = histogramZones;\n            }\n            getValues(series, params) {\n                const indexToShift = (params.longPeriod - params.shortPeriod), // #14197\n                MACD = [], xMACD = [], yMACD = [];\n                let shortEMA, longEMA, i, j = 0, signalLine = [];\n                if (series.xData.length <\n                    params.longPeriod + params.signalPeriod) {\n                    return;\n                }\n                // Calculating the short and long EMA used when calculating the MACD\n                shortEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.shortPeriod,\n                    index: params.index\n                });\n                longEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.longPeriod,\n                    index: params.index\n                });\n                shortEMA = shortEMA.values;\n                longEMA = longEMA.values;\n                // Subtract each Y value from the EMA's and create the new dataset\n                // (MACD)\n                for (i = 0; i <= shortEMA.length; i++) {\n                    if (defined(longEMA[i]) &&\n                        defined(longEMA[i][1]) &&\n                        defined(shortEMA[i + indexToShift]) &&\n                        defined(shortEMA[i + indexToShift][0])) {\n                        MACD.push([\n                            shortEMA[i + indexToShift][0],\n                            0,\n                            null,\n                            shortEMA[i + indexToShift][1] -\n                                longEMA[i][1]\n                        ]);\n                    }\n                }\n                // Set the Y and X data of the MACD. This is used in calculating the\n                // signal line.\n                for (i = 0; i < MACD.length; i++) {\n                    xMACD.push(MACD[i][0]);\n                    yMACD.push([0, null, MACD[i][3]]);\n                }\n                // Setting the signalline (Signal Line: X-day EMA of MACD line).\n                signalLine = SeriesRegistry.seriesTypes.ema.prototype.getValues({\n                    xData: xMACD,\n                    yData: yMACD\n                }, {\n                    period: params.signalPeriod,\n                    index: 2\n                });\n                signalLine = signalLine.values;\n                // Setting the MACD Histogram. In comparison to the loop with pure\n                // MACD this loop uses MACD x value not xData.\n                for (i = 0; i < MACD.length; i++) {\n                    // Detect the first point\n                    if (MACD[i][0] >= signalLine[0][0]) {\n                        MACD[i][2] = signalLine[j][1];\n                        yMACD[i] = [0, signalLine[j][1], MACD[i][3]];\n                        if (MACD[i][3] === null) {\n                            MACD[i][1] = 0;\n                            yMACD[i][0] = 0;\n                        }\n                        else {\n                            MACD[i][1] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                            yMACD[i][0] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                        }\n                        j++;\n                    }\n                }\n                return {\n                    values: MACD,\n                    xData: xMACD,\n                    yData: yMACD\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Moving Average Convergence Divergence (MACD). This series requires\n         * `linkedTo` option to be set and should be loaded after the\n         * `stock/indicators/indicators.js`.\n         *\n         * @sample stock/indicators/macd\n         *         MACD indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/macd\n         * @optionparent plotOptions.macd\n         */\n        MACDIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * The short period for indicator calculations.\n                 */\n                shortPeriod: 12,\n                /**\n                 * The long period for indicator calculations.\n                 */\n                longPeriod: 26,\n                /**\n                 * The base period for signal calculations.\n                 */\n                signalPeriod: 9,\n                period: 26\n            },\n            /**\n             * The styles for signal line\n             */\n            signalLine: {\n                /**\n                 * @sample stock/indicators/macd-zones\n                 *         Zones in MACD\n                 *\n                 * @extends plotOptions.macd.zones\n                 */\n                zones: [],\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type  {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for macd line\n             */\n            macdLine: {\n                /**\n                 * @sample stock/indicators/macd-zones\n                 *         Zones in MACD\n                 *\n                 * @extends plotOptions.macd.zones\n                 */\n                zones: [],\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type  {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: 0,\n            groupPadding: 0.1,\n            pointPadding: 0.1,\n            crisp: false,\n            states: {\n                hover: {\n                    halo: {\n                        size: 0\n                    }\n                }\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                    'Value: {point.MACD}<br/>' +\n                    'Signal: {point.signal}<br/>' +\n                    'Histogram: {point.y}<br/>'\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            },\n            minPointLength: 0\n        });\n        extend(MACDIndicator.prototype, {\n            nameComponents: ['longPeriod', 'shortPeriod', 'signalPeriod'],\n            // \"y\" value is treated as Histogram data\n            pointArrayMap: ['y', 'signal', 'MACD'],\n            parallelArrays: ['x', 'y', 'signal', 'MACD'],\n            pointValKey: 'y',\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: H.seriesTypes.column.prototype.getColumnMetrics,\n            crispCol: H.seriesTypes.column.prototype.crispCol,\n            drawPoints: H.seriesTypes.column.prototype.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('macd', MACDIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `MACD` series. If the [type](#series.macd.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.macd\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/macd\n         * @apioption series.macd\n         */\n        ''; // To include the above in the js output\n\n        return MACDIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/macd.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","H","SeriesRegistry","U","noop","column","ColumnSeries","sma","SMAIndicator","seriesTypes","extend","correctFloat","defined","merge","MACDIndicator","init","prototype","arguments","originalColor","color","options","colorIndex","signalLine","styles","lineColor","getCyclic","chart","colors","macdLine","macdZones","zones","startIndex","signalZones","concat","length","toYData","point","y","signal","MACD","translate","indicator","plotNames","points","forEach","value","i","yAxis","toPixels","destroy","graph","graphmacd","graphsignal","drawGraph","mainLinePoints","mainLineOptions","histogramZones","gappedExtend","gapSize","otherSignals","pointsLength","plotMACD","push","plotX","plotY","isNull","plotSignal","lineName","slice","call","applyZones","hide","getValues","series","params","indexToShift","longPeriod","shortPeriod","xMACD","yMACD","shortEMA","longEMA","j","xData","signalPeriod","ema","period","index","values","yData","defaultOptions","lineWidth","threshold","groupPadding","pointPadding","crisp","states","hover","halo","size","tooltip","pointFormat","dataGrouping","approximation","minPointLength","nameComponents","pointArrayMap","parallelArrays","pointValKey","markerAttribs","getColumnMetrics","crispCol","drawPoints","registerSeriesType"],"mappings":"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"}