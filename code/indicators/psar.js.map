{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.7 (2024-08-14)\n *\n * Parabolic SAR Indicator for Highcharts Stock\n *\n * (c) 2010-2024 Grzegorz Blachliński\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/psar', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/PSAR/PSARIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Parabolic SAR indicator for Highcharts Stock\n         *\n         *  (c) 2010-2024 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         *\n         */\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /**\n         *\n         */\n        function calculateDirection(previousDirection, low, high, PSAR) {\n            if ((previousDirection === 1 && low > PSAR) ||\n                (previousDirection === -1 && high > PSAR)) {\n                return 1;\n            }\n            return -1;\n        }\n        /* *\n         * Method for calculating acceleration factor\n         * dir - direction\n         * pDir - previous Direction\n         * eP - extreme point\n         * pEP - previous extreme point\n         * inc - increment for acceleration factor\n         * maxAcc - maximum acceleration factor\n         * initAcc - initial acceleration factor\n         */\n        /**\n         *\n         */\n        function getAccelerationFactor(dir, pDir, eP, pEP, pAcc, inc, maxAcc, initAcc) {\n            if (dir === pDir) {\n                if (dir === 1 && (eP > pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                if (dir === -1 && (eP < pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                return pAcc;\n            }\n            return initAcc;\n        }\n        /**\n         *\n         */\n        function getExtremePoint(high, low, previousDirection, previousExtremePoint) {\n            if (previousDirection === 1) {\n                return (high > previousExtremePoint) ? high : previousExtremePoint;\n            }\n            return (low < previousExtremePoint) ? low : previousExtremePoint;\n        }\n        /**\n         *\n         */\n        function getEPMinusPSAR(EP, PSAR) {\n            return EP - PSAR;\n        }\n        /**\n         *\n         */\n        function getAccelerationFactorMultiply(accelerationFactor, EPMinusSAR) {\n            return accelerationFactor * EPMinusSAR;\n        }\n        /* *\n         * Method for calculating PSAR\n         * pdir - previous direction\n         * sDir - second previous Direction\n         * PSAR - previous PSAR\n         * pACCMultiply - previous acceleration factor multiply\n         * sLow - second previous low\n         * pLow - previous low\n         * sHigh - second previous high\n         * pHigh - previous high\n         * pEP - previous extreme point\n         */\n        /**\n         *\n         */\n        function getPSAR(pdir, sDir, PSAR, pACCMulti, sLow, pLow, pHigh, sHigh, pEP) {\n            if (pdir === sDir) {\n                if (pdir === 1) {\n                    return (PSAR + pACCMulti < Math.min(sLow, pLow)) ?\n                        PSAR + pACCMulti :\n                        Math.min(sLow, pLow);\n                }\n                return (PSAR + pACCMulti > Math.max(sHigh, pHigh)) ?\n                    PSAR + pACCMulti :\n                    Math.max(sHigh, pHigh);\n            }\n            return pEP;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Parabolic SAR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.psar\n         *\n         * @augments Highcharts.Series\n         */\n        class PSARIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.nameComponents = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const xVal = series.xData, yVal = series.yData, maxAccelerationFactor = params.maxAccelerationFactor, increment = params.increment, \n                // Set initial acc factor (for every new trend!)\n                initialAccelerationFactor = params.initialAccelerationFactor, decimals = params.decimals, index = params.index, PSARArr = [], xData = [], yData = [];\n                let accelerationFactor = params.initialAccelerationFactor, direction, \n                // Extreme point is the lowest low for falling and highest high\n                // for rising psar - and we are starting with falling\n                extremePoint = yVal[0][1], EPMinusPSAR, accelerationFactorMultiply, newDirection, previousDirection = 1, prevLow, prevPrevLow, prevHigh, prevPrevHigh, PSAR = yVal[0][2], newExtremePoint, high, low, ind;\n                if (index >= yVal.length) {\n                    return;\n                }\n                for (ind = 0; ind < index; ind++) {\n                    extremePoint = Math.max(yVal[ind][1], extremePoint);\n                    PSAR = Math.min(yVal[ind][2], toFixed(PSAR, decimals));\n                }\n                direction = (yVal[ind][1] > PSAR) ? 1 : -1;\n                EPMinusPSAR = getEPMinusPSAR(extremePoint, PSAR);\n                accelerationFactor = params.initialAccelerationFactor;\n                accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                PSARArr.push([xVal[index], PSAR]);\n                xData.push(xVal[index]);\n                yData.push(toFixed(PSAR, decimals));\n                for (ind = index + 1; ind < yVal.length; ind++) {\n                    prevLow = yVal[ind - 1][2];\n                    prevPrevLow = yVal[ind - 2][2];\n                    prevHigh = yVal[ind - 1][1];\n                    prevPrevHigh = yVal[ind - 2][1];\n                    high = yVal[ind][1];\n                    low = yVal[ind][2];\n                    // Null points break PSAR\n                    if (prevPrevLow !== null &&\n                        prevPrevHigh !== null &&\n                        prevLow !== null &&\n                        prevHigh !== null &&\n                        high !== null &&\n                        low !== null) {\n                        PSAR = getPSAR(direction, previousDirection, PSAR, accelerationFactorMultiply, prevPrevLow, prevLow, prevHigh, prevPrevHigh, extremePoint);\n                        newExtremePoint = getExtremePoint(high, low, direction, extremePoint);\n                        newDirection = calculateDirection(previousDirection, low, high, PSAR);\n                        accelerationFactor = getAccelerationFactor(newDirection, direction, newExtremePoint, extremePoint, accelerationFactor, increment, maxAccelerationFactor, initialAccelerationFactor);\n                        EPMinusPSAR = getEPMinusPSAR(newExtremePoint, PSAR);\n                        accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                        PSARArr.push([xVal[ind], toFixed(PSAR, decimals)]);\n                        xData.push(xVal[ind]);\n                        yData.push(toFixed(PSAR, decimals));\n                        previousDirection = direction;\n                        direction = newDirection;\n                        extremePoint = newExtremePoint;\n                    }\n                }\n                return {\n                    values: PSARArr,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /**\n         * Parabolic SAR. This series requires `linkedTo`\n         * option to be set and should be loaded\n         * after `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/psar\n         *         Parabolic SAR Indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/psar\n         * @optionparent plotOptions.psar\n         */\n        PSARIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            lineWidth: 0,\n            marker: {\n                enabled: true\n            },\n            states: {\n                hover: {\n                    lineWidthPlus: 0\n                }\n            },\n            /**\n             * @excluding period\n             */\n            params: {\n                period: void 0, // Unchangeable period, do not inherit (#15362)\n                /**\n                 * The initial value for acceleration factor.\n                 * Acceleration factor is starting with this value\n                 * and increases by specified increment each time\n                 * the extreme point makes a new high.\n                 * AF can reach a maximum of maxAccelerationFactor,\n                 * no matter how long the uptrend extends.\n                 */\n                initialAccelerationFactor: 0.02,\n                /**\n                 * The Maximum value for acceleration factor.\n                 * AF can reach a maximum of maxAccelerationFactor,\n                 * no matter how long the uptrend extends.\n                 */\n                maxAccelerationFactor: 0.2,\n                /**\n                 * Acceleration factor increases by increment each time\n                 * the extreme point makes a new high.\n                 *\n                 * @since 6.0.0\n                 */\n                increment: 0.02,\n                /**\n                 * Index from which PSAR is starting calculation\n                 *\n                 * @since 6.0.0\n                 */\n                index: 2,\n                /**\n                 * Number of maximum decimals that are used in PSAR calculations.\n                 *\n                 * @since 6.0.0\n                 */\n                decimals: 4\n            }\n        });\n        SeriesRegistry.registerSeriesType('psar', PSARIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `PSAR` series. If the [type](#series.psar.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.psar\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/psar\n         * @apioption series.psar\n         */\n        ''; // To include the above in the js output\n\n        return PSARIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/psar.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","sma","SMAIndicator","seriesTypes","merge","toFixed","a","n","parseFloat","PSARIndicator","constructor","arguments","nameComponents","getValues","series","params","xVal","xData","yVal","yData","maxAccelerationFactor","increment","initialAccelerationFactor","decimals","index","PSARArr","accelerationFactor","direction","extremePoint","EPMinusPSAR","accelerationFactorMultiply","newDirection","previousDirection","prevLow","prevPrevLow","prevHigh","prevPrevHigh","PSAR","newExtremePoint","high","low","ind","length","Math","max","min","EP","push","previousExtremePoint","pdir","sDir","pACCMulti","pEP","dir","pDir","pAcc","eP","values","defaultOptions","lineWidth","marker","enabled","states","hover","lineWidthPlus","period","registerSeriesType"],"mappings":"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"}