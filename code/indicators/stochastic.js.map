{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.7 (2024-08-14)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Pawe≈Ç Fus\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/stochastic', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/ArrayUtilities.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2024 Pawel Fus & Daniel Studencki\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get extremes of array filled by OHLC data.\n         *\n         * @private\n         *\n         * @param {Array<Array<number>>} arr\n         * Array of OHLC points (arrays).\n         *\n         * @param {number} minIndex\n         * Index of \"low\" value in point array.\n         *\n         * @param {number} maxIndex\n         * Index of \"high\" value in point array.\n         *\n         * @return {Array<number,number>}\n         * Returns array with min and max value.\n         */\n        function getArrayExtremes(arr, minIndex, maxIndex) {\n            return arr.reduce((prev, target) => [\n                Math.min(prev[0], target[minIndex]),\n                Math.max(prev[1], target[maxIndex])\n            ], [Number.MAX_VALUE, -Number.MAX_VALUE]);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ArrayUtilities = {\n            getArrayExtremes\n        };\n\n        return ArrayUtilities;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: { prototype: smaProto } } = SeriesRegistry.seriesTypes;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, between which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            const pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                const proto = IndicatorClass.prototype;\n                proto.linesApiNames = (proto.linesApiNames ||\n                    linesApiNames.slice());\n                proto.pointArrayMap = (proto.pointArrayMap ||\n                    pointArrayMap.slice());\n                proto.pointValKey = (proto.pointValKey ||\n                    pointValKey);\n                proto.areaLinesNames = (proto.areaLinesNames ||\n                    areaLinesNames.slice());\n                proto.drawGraph = indicatorDrawGraph;\n                proto.getGraphPath = indicatorGetGraphPath;\n                proto.toYData = indicatorToYData;\n                proto.translate = indicatorTranslate;\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                const translatedLines = [];\n                (indicator.pointArrayMap || []).forEach((propertyName) => {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                const indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // Additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                let pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach((plotLine, index) => {\n                    // Create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    const index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach((lineName, i) => {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                let areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (let i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                const pointColl = [];\n                (this.pointArrayMap || []).forEach((propertyName) => {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                const pointArrayMap = this.pointArrayMap;\n                let LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach((point) => {\n                    pointArrayMap.forEach((propertyName, i) => {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (this.dataModify) {\n                            value = this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Stochastic/StochasticIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.stochastic\n         *\n         * @augments Highcharts.Series\n         */\n        class StochasticIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                super.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    smoothedLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            }\n            getValues(series, params) {\n                const periodK = params.periods[0], periodD = params.periods[1], xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1-%K, 2-%D\n                SO = [], xData = [], yData = [], close = 3, low = 2, high = 1;\n                let slicedY, CL, HL, LL, K, D = null, points, extremes, i;\n                // Stochastic requires close value\n                if (yValLen < periodK ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // If the value of initial points is constant, wait until it changes\n                // to calculate correct Stochastic values\n                let constantValues = true, j = 0;\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = periodK - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - periodK + 1, i + 1);\n                    // Calculate %K\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0]; // Lowest low in %K periods\n                    CL = yVal[i][close] - LL;\n                    HL = extremes[1] - LL;\n                    K = CL / HL * 100;\n                    if (isNaN(K) && constantValues) {\n                        j++;\n                        continue;\n                    }\n                    else if (constantValues && !isNaN(K)) {\n                        constantValues = false;\n                    }\n                    const length = xData.push(xVal[i]);\n                    // If N-period previous values are constant which results in NaN %K,\n                    // we need to use previous %K value if it is a number,\n                    // otherwise we should use null\n                    if (isNaN(K)) {\n                        yData.push([\n                            yData[length - 2] &&\n                                typeof yData[length - 2][0] === 'number' ?\n                                yData[length - 2][0] : null,\n                            null\n                        ]);\n                    }\n                    else {\n                        yData.push([K, null]);\n                    }\n                    // Calculate smoothed %D, which is SMA of %K\n                    if (i >= j + (periodK - 1) + (periodD - 1)) {\n                        points = super.getValues({\n                            xData: xData.slice(-periodD),\n                            yData: yData.slice(-periodD)\n                        }, {\n                            period: periodD\n                        });\n                        D = points.yData[0];\n                    }\n                    SO.push([xVal[i], K, D]);\n                    yData[length - 1][1] = D;\n                }\n                return {\n                    values: SO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Stochastic oscillator. This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/stochastic\n         *         Stochastic oscillator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/stochastic\n         * @optionparent plotOptions.stochastic\n         */\n        StochasticIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index, period\n             */\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0,\n                /**\n                 * Periods for Stochastic oscillator: [%K, %D].\n                 *\n                 * @type    {Array<number,number>}\n                 * @default [14, 3]\n                 */\n                periods: [14, 3]\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'\n            },\n            /**\n             * Smoothed line options.\n             */\n            smoothedLine: {\n                /**\n                 * Styles for a smoothed line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.stochastic.color\n                     * ](#plotOptions.stochastic.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(StochasticIndicator.prototype, {\n            areaLinesNames: [],\n            nameComponents: ['periods'],\n            nameBase: 'Stochastic',\n            pointArrayMap: ['y', 'smoothed'],\n            parallelArrays: ['x', 'y', 'smoothed'],\n            pointValKey: 'y',\n            linesApiNames: ['smoothedLine']\n        });\n        MultipleLinesComposition.compose(StochasticIndicator);\n        SeriesRegistry.registerSeriesType('stochastic', StochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Stochastic indicator. If the [type](#series.stochastic.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.stochastic\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @apioption series.stochastic\n         */\n        ''; // To include the above in the js output\n\n        return StochasticIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/stochastic.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","getArrayExtremes","arr","minIndex","maxIndex","reduce","prev","target","Math","min","max","Number","MAX_VALUE","SeriesRegistry","U","MultipleLinesComposition","sma","prototype","smaProto","seriesTypes","defined","error","merge","linesApiNames","pointArrayMap","areaLinesNames","getLineName","propertyName","charAt","toUpperCase","slice","getTranslatedLinesNames","indicator","excludedValue","translatedLines","forEach","push","indicatorDrawGraph","pointValKey","mainLinePoints","points","mainLineOptions","options","mainLinePath","graph","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","length","point","plotLine","index","x","plotX","plotY","isNull","userOptions","fillColor","secondLinePoints","indexOf","firstLinePoints","originalColor","color","nextPoints","area","fillGraph","drawGraph","call","lineName","i","styles","indicatorGetGraphPath","areaPath","higherAreaPath","getGraphPath","arguments","indicatorToYData","pointColl","indicatorTranslate","LinesNames","value","translate","dataModify","modifyValue","yAxis","toPixels","compose","IndicatorClass","proto","toYData","AU","SMAIndicator","extend","isArray","StochasticIndicator","init","smoothedLine","lineColor","getValues","series","params","periodK","periods","periodD","xVal","xData","yVal","yData","yValLen","SO","slicedY","LL","K","D","extremes","constantValues","j","isNaN","CL","period","values","defaultOptions","marker","enabled","tooltip","pointFormat","lineWidth","dataGrouping","approximation","nameComponents","nameBase","parallelArrays","registerSeriesType"],"mappings":"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"}