{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.7 (2024-08-14)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Kacper Madej\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/zigzag', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/Zigzag/ZigzagIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Zig Zag series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.zigzag\n         *\n         * @augments Highcharts.Series\n         */\n        class ZigzagIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const lowIndex = params.lowIndex, highIndex = params.highIndex, deviation = params.deviation / 100, deviations = {\n                    'low': 1 + deviation,\n                    'high': 1 - deviation\n                }, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, zigzag = [], xData = [], yData = [];\n                let i, j, zigzagPoint, directionUp, exitLoop = false, yIndex = false;\n                // Exit if not enough points or no low or high values\n                if (!xVal || xVal.length <= 1 ||\n                    (yValLen &&\n                        (typeof yVal[0][lowIndex] === 'undefined' ||\n                            typeof yVal[0][highIndex] === 'undefined'))) {\n                    return;\n                }\n                // Set first zigzag point candidate\n                const firstZigzagLow = yVal[0][lowIndex], firstZigzagHigh = yVal[0][highIndex];\n                // Search for a second zigzag point candidate,\n                // this will also set first zigzag point\n                for (i = 1; i < yValLen; i++) {\n                    // Required change to go down\n                    if (yVal[i][lowIndex] <= firstZigzagHigh * deviations.high) {\n                        zigzag.push([xVal[0], firstZigzagHigh]);\n                        // Second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        // Next line will be going up\n                        directionUp = true;\n                        exitLoop = true;\n                        // Required change to go up\n                    }\n                    else if (yVal[i][highIndex] >= firstZigzagLow * deviations.low) {\n                        zigzag.push([xVal[0], firstZigzagLow]);\n                        // Second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        // Next line will be going down\n                        directionUp = false;\n                        exitLoop = true;\n                    }\n                    if (exitLoop) {\n                        xData.push(zigzag[0][0]);\n                        yData.push(zigzag[0][1]);\n                        j = i++;\n                        i = yValLen;\n                    }\n                }\n                // Search for next zigzags\n                for (i = j; i < yValLen; i++) {\n                    if (directionUp) { // Next line up\n                        // lower when going down -> change zigzag candidate\n                        if (yVal[i][lowIndex] <= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        }\n                        // Required change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][highIndex] >=\n                            zigzagPoint[1] * deviations.low) {\n                            yIndex = highIndex;\n                        }\n                    }\n                    else { // Next line down\n                        // higher when going up -> change zigzag candidate\n                        if (yVal[i][highIndex] >= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        }\n                        // Required change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][lowIndex] <=\n                            zigzagPoint[1] * deviations.high) {\n                            yIndex = lowIndex;\n                        }\n                    }\n                    if (yIndex !== false) { // New zigzag point and direction change\n                        zigzag.push(zigzagPoint);\n                        xData.push(zigzagPoint[0]);\n                        yData.push(zigzagPoint[1]);\n                        zigzagPoint = [xVal[i], yVal[i][yIndex]];\n                        directionUp = !directionUp;\n                        yIndex = false;\n                    }\n                }\n                const zigzagLen = zigzag.length;\n                // No zigzag for last point\n                if (zigzagLen !== 0 &&\n                    zigzag[zigzagLen - 1][0] < xVal[yValLen - 1]) {\n                    // Set last point from zigzag candidate\n                    zigzag.push(zigzagPoint);\n                    xData.push(zigzagPoint[0]);\n                    yData.push(zigzagPoint[1]);\n                }\n                return {\n                    values: zigzag,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Zig Zag indicator.\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/zigzag\n         *         Zig Zag indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/zigzag\n         * @optionparent plotOptions.zigzag\n         */\n        ZigzagIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index, period\n             */\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0,\n                /**\n                 * The point index which indicator calculations will base - low\n                 * value.\n                 *\n                 * For example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 */\n                lowIndex: 2,\n                /**\n                 * The point index which indicator calculations will base - high\n                 * value.\n                 *\n                 * For example using OHLC data, index=1 means the indicator will be\n                 * calculated using High values.\n                 */\n                highIndex: 1,\n                /**\n                 * The threshold for the value change.\n                 *\n                 * For example deviation=1 means the indicator will ignore all price\n                 * movements less than 1%.\n                 */\n                deviation: 1\n            }\n        });\n        extend(ZigzagIndicator.prototype, {\n            nameComponents: ['deviation'],\n            nameSuffixes: ['%'],\n            nameBase: 'Zig Zag'\n        });\n        SeriesRegistry.registerSeriesType('zigzag', ZigzagIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Zig Zag` series. If the [type](#series.zigzag.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.zigzag\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/zigzag\n         * @apioption series.zigzag\n         */\n        ''; // Adds doclets above to transpiled file\n\n        return ZigzagIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/zigzag.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","sma","SMAIndicator","seriesTypes","merge","extend","ZigzagIndicator","getValues","series","params","lowIndex","highIndex","deviation","deviations","xVal","xData","yVal","yData","yValLen","length","zigzag","i","j","zigzagPoint","directionUp","exitLoop","yIndex","firstZigzagLow","firstZigzagHigh","high","push","low","zigzagLen","values","defaultOptions","index","period","prototype","nameComponents","nameSuffixes","nameBase","registerSeriesType"],"mappings":"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"}